// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: questionbank.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionbankClient is the client API for Questionbank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionbankClient interface {
	CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error)
	AddQuestions(ctx context.Context, in *AddQuestionsRequest, opts ...grpc.CallOption) (*AddQuestionsResponse, error)
	AddCorrectAnswer(ctx context.Context, in *AddCorrectAnswerRequest, opts ...grpc.CallOption) (*AddCorrectAnswerResponse, error)
}

type questionbankClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionbankClient(cc grpc.ClientConnInterface) QuestionbankClient {
	return &questionbankClient{cc}
}

func (c *questionbankClient) CreateQuiz(ctx context.Context, in *CreateQuizRequest, opts ...grpc.CallOption) (*CreateQuizResponse, error) {
	out := new(CreateQuizResponse)
	err := c.cc.Invoke(ctx, "/questionbank.questionbank/CreateQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionbankClient) AddQuestions(ctx context.Context, in *AddQuestionsRequest, opts ...grpc.CallOption) (*AddQuestionsResponse, error) {
	out := new(AddQuestionsResponse)
	err := c.cc.Invoke(ctx, "/questionbank.questionbank/AddQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionbankClient) AddCorrectAnswer(ctx context.Context, in *AddCorrectAnswerRequest, opts ...grpc.CallOption) (*AddCorrectAnswerResponse, error) {
	out := new(AddCorrectAnswerResponse)
	err := c.cc.Invoke(ctx, "/questionbank.questionbank/AddCorrectAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionbankServer is the server API for Questionbank service.
// All implementations should embed UnimplementedQuestionbankServer
// for forward compatibility
type QuestionbankServer interface {
	CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error)
	AddQuestions(context.Context, *AddQuestionsRequest) (*AddQuestionsResponse, error)
	AddCorrectAnswer(context.Context, *AddCorrectAnswerRequest) (*AddCorrectAnswerResponse, error)
}

// UnimplementedQuestionbankServer should be embedded to have forward compatible implementations.
type UnimplementedQuestionbankServer struct {
}

func (UnimplementedQuestionbankServer) CreateQuiz(context.Context, *CreateQuizRequest) (*CreateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuiz not implemented")
}
func (UnimplementedQuestionbankServer) AddQuestions(context.Context, *AddQuestionsRequest) (*AddQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestions not implemented")
}
func (UnimplementedQuestionbankServer) AddCorrectAnswer(context.Context, *AddCorrectAnswerRequest) (*AddCorrectAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCorrectAnswer not implemented")
}

// UnsafeQuestionbankServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionbankServer will
// result in compilation errors.
type UnsafeQuestionbankServer interface {
	mustEmbedUnimplementedQuestionbankServer()
}

func RegisterQuestionbankServer(s grpc.ServiceRegistrar, srv QuestionbankServer) {
	s.RegisterService(&Questionbank_ServiceDesc, srv)
}

func _Questionbank_CreateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionbankServer).CreateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionbank.questionbank/CreateQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionbankServer).CreateQuiz(ctx, req.(*CreateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questionbank_AddQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionbankServer).AddQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionbank.questionbank/AddQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionbankServer).AddQuestions(ctx, req.(*AddQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Questionbank_AddCorrectAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCorrectAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionbankServer).AddCorrectAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionbank.questionbank/AddCorrectAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionbankServer).AddCorrectAnswer(ctx, req.(*AddCorrectAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Questionbank_ServiceDesc is the grpc.ServiceDesc for Questionbank service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Questionbank_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "questionbank.questionbank",
	HandlerType: (*QuestionbankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuiz",
			Handler:    _Questionbank_CreateQuiz_Handler,
		},
		{
			MethodName: "AddQuestions",
			Handler:    _Questionbank_AddQuestions_Handler,
		},
		{
			MethodName: "AddCorrectAnswer",
			Handler:    _Questionbank_AddCorrectAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "questionbank.proto",
}
